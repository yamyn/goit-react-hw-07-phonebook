{"version":3,"sources":["redux/contacts/contactsSelectors.js","redux/alert/alertSelectors.js","components/Section/Section.js","helpers/apiService.js","redux/contacts/contactsActions.js","components/ContactsList/ContactsListItem.js","components/Notification/Notification.js","components/ContactsList/ContactsList.js","components/ContactsList/ContatctsListContainer.js","redux/contacts/contactsOperations.js","components/Filter/Filter.js","components/Filter/FilterContainer.js","components/CreateContactForm/CreateContactForm.js","components/CreateContactForm/CreateContactFormContainer.js","components/Alert/Alert.js","components/App/App.js","components/App/AppContainer.js","redux/contacts/contactsReducer.js","redux/alert/alertActions.js","redux/alert/alertReducer.js","helpers/Validation.js","redux/middleware/validation.js","redux/middleware/errorHandler.js","redux/store.js","index.js","components/ContactsList/ContactsList.module.css","transitions/pop.module.css","components/CreateContactForm/CreateContactForm.module.css","components/App/App.module.css","transitions/slide-500ms.module.css","components/Section/Section.module.css","transitions/slide.module.css","components/Filter/Filter.module.css","components/Alert/Alert.module.css"],"names":["getContacts","state","contactsList","contacts","getContactsLength","length","getFilter","filter","getFilteredContacts","createSelector","contact","name","toLowerCase","includes","alert","Section","title","children","className","titleSection","axios","create","baseURL","timeout","loadContactsStart","createAction","loadContactsSuccess","payload","loadContactsError","error","message","meta","addContactValid","addContact","addContactStart","addContactSuccess","addContactError","deleteContactStart","deleteContactSuccess","id","deleteContactError","changeFilter","ContactsListItem","number","onDeleteContact","index","wrap","type","onClick","button","icon","Notification","ContactsList","onLoadContacts","this","props","TransitionGroup","component","list","map","CSSTransition","key","classNames","slideTransition","unmountOnExit","item","Component","mapDispatchToProps","dispatch","fetch","delete","then","catch","get","response","data","connect","NumberFilter","value","onChangeFilter","onChange","placeholder","event","target","Filter","TaskEditor","handleChange","setState","handleSubmit","preventDefault","onAddContact","onSubmit","form","htmlFor","contactsActions","CreateContactForm","Alert","p","App","addTittle","count","isAlert","styles","container","in","slideTittleTransition","popTransition","getAlert","contactsReducer","createReducer","action","filterReducer","contactsListReducer","combineReducers","toShowAlert","toHideAlert","alertReducer","INVALIDVALUE","notUnique","META","validSchema","validate","schema","errorTransform","checkUnique","details","incorrValue","path","some","savedContact","Joi","pattern","trim","required","validation","store","next","getState","validateRes","Validation","post","alertMessage","alertActions","setTimeout","errorHandler","configureStore","reducer","middleware","getDefaultMiddleware","ReactDOM","render","document","querySelector","module","exports"],"mappings":"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","file":"static/js/main.0677c1b6.chunk.js","sourcesContent":["import { createSelector } from 'reselect';\n\nexport const getContacts = state => state.contactsList.contacts;\n\nexport const getContactsLength = state => {\n    const { contacts } = state.contactsList;\n    if (!contacts) return 0;\n    return contacts.length;\n};\n\nexport const getFilter = state => state.contactsList.filter;\n\nexport const getFilteredContacts = createSelector(\n    [getContacts, getFilter],\n    (contacts, filter) => {\n        if (contacts.length <= 1) return contacts;\n        return contacts.filter(contact =>\n            contact.name.toLowerCase().includes(filter.toLowerCase()),\n        );\n    },\n);\n","export default state => state.alert;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { titleSection } from './Section.module.css';\n\nconst Section = ({ title, children }) => (\n    <section className={titleSection}>\n        <h2>{title}</h2>\n        {children}\n    </section>\n);\n\nSection.propTypes = {\n    title: PropTypes.string.isRequired,\n\n    children: PropTypes.node.isRequired,\n};\n\nexport default Section;\n","import axios from 'axios';\n\nexport default axios.create({\n    baseURL: 'http://localhost:3030/contacts',\n    timeout: 10000,\n});\n","import { createAction } from '@reduxjs/toolkit';\n\nexport const loadContactsStart = createAction('LOADCONTACTS/START');\n\nexport const loadContactsSuccess = createAction(\n    'LOADCONTACTS/SUCCESS',\n    contacts => ({\n        payload: { contacts },\n    }),\n);\n\nexport const loadContactsError = createAction('LOADCONTACTS/ERROR', error => ({\n    payload: { message: error.message },\n    meta: { error: true },\n}));\n\nexport const addContactValid = createAction('ADDCONTACT/START', contact => ({\n    payload: { contact },\n    meta: { addContact: true },\n}));\n\nexport const addContactStart = createAction('ADDCONTACT/START');\n\nexport const addContactSuccess = createAction(\n    'ADDCONTACT/SUCCESS',\n    contact => ({\n        payload: { contact },\n    }),\n);\n\nexport const addContactError = createAction('ADDCONTACT/ERROR', error => ({\n    payload: { message: error.message },\n    meta: { error: true },\n}));\n\nexport const deleteContactStart = createAction('DELETECONTACT/START');\n\nexport const deleteContactSuccess = createAction(\n    'DELETECONTACT/SUCCESS',\n    id => ({\n        payload: { id },\n    }),\n);\n\nexport const deleteContactError = createAction(\n    'DELETECONTACT/ERROR',\n    error => ({\n        payload: { message: error.message },\n        meta: { error: true },\n    }),\n);\n\nexport const changeFilter = createAction('CHANGEFILTER', filter => ({\n    payload: { filter },\n}));\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { icon, button, wrap } from './ContactsList.module.css';\n\nfunction ContactsListItem({ name, number, onDeleteContact, index }) {\n    return (\n        <>\n            <div>\n                <span>\n                    {index}. {name}\n                </span>\n            </div>\n            <div className={wrap}>\n                <p>{number}</p>\n                <button\n                    type=\"button\"\n                    onClick={onDeleteContact}\n                    className={button}\n                >\n                    <i className={`${icon} material-icons`}>close</i>\n                </button>\n            </div>\n        </>\n    );\n}\n\nContactsListItem.propTypes = {\n    name: PropTypes.string.isRequired,\n    number: PropTypes.string.isRequired,\n    onDeleteContact: PropTypes.func.isRequired,\n    index: PropTypes.number.isRequired,\n};\n\nexport default ContactsListItem;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Notification = ({ message }) => <p>{message}!</p>;\n\nNotification.propTypes = {\n    message: PropTypes.string.isRequired,\n};\n\nexport default Notification;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { TransitionGroup, CSSTransition } from 'react-transition-group';\n\nimport { list, item } from './ContactsList.module.css';\nimport ContactsListItem from './ContactsListItem';\nimport Notification from '../Notification/Notification';\nimport slideTransition from '../../transitions/slide.module.css';\n\nexport default class ContactsList extends Component {\n    static propTypes = {\n        contacts: PropTypes.arrayOf(\n            PropTypes.shape({\n                id: PropTypes.string.isRequired,\n                name: PropTypes.string.isRequired,\n                number: PropTypes.string.isRequired,\n            }),\n        ).isRequired,\n        onDeleteContact: PropTypes.func.isRequired,\n        onLoadContacts: PropTypes.func.isRequired,\n    };\n\n    componentDidMount() {\n        const { onLoadContacts } = this.props;\n        onLoadContacts();\n    }\n\n    render() {\n        const { contacts, onDeleteContact } = this.props;\n        return (\n            <>\n                {contacts.length > 0 ? (\n                    <TransitionGroup component=\"ul\" className={list}>\n                        {contacts.map(({ id, name, number }, index) => (\n                            <CSSTransition\n                                key={id}\n                                timeout={300}\n                                classNames={slideTransition}\n                                unmountOnExit\n                            >\n                                <li key={id} className={item}>\n                                    <ContactsListItem\n                                        index={index + 1}\n                                        name={name}\n                                        number={number}\n                                        onDeleteContact={() =>\n                                            onDeleteContact(id)\n                                        }\n                                    />\n                                </li>\n                            </CSSTransition>\n                        ))}\n                    </TransitionGroup>\n                ) : (\n                    <Notification message=\"Contacts for query not found\" />\n                )}\n            </>\n        );\n    }\n}\n","import { connect } from 'react-redux';\n\nimport {\n    fetchContacts,\n    deleteContacts,\n} from '../../redux/contacts/contactsOperations';\nimport { getFilteredContacts } from '../../redux/contacts/contactsSelectors';\n\nimport ContactsList from './ContactsList';\n\nconst mapStateToProps = state => ({\n    contacts: getFilteredContacts(state),\n});\n\nconst mapDispatchToProps = {\n    onDeleteContact: deleteContacts,\n    onLoadContacts: fetchContacts,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactsList);\n","import fetch from '../../helpers/apiService';\n\nimport {\n    loadContactsStart,\n    loadContactsSuccess,\n    loadContactsError,\n    addContactStart,\n    addContactSuccess,\n    addContactError,\n    deleteContactStart,\n    deleteContactSuccess,\n    deleteContactError,\n} from './contactsActions';\n\nexport const fetchContacts = () => dispatch => {\n    dispatch(loadContactsStart());\n\n    fetch\n        .get()\n        .then(response => dispatch(loadContactsSuccess(response.data)))\n        .catch(error => dispatch(loadContactsError(error)));\n};\n\nexport const deleteContacts = id => dispatch => {\n    dispatch(deleteContactStart());\n\n    fetch\n        .delete(`/${id}`)\n        .then(() => dispatch(deleteContactSuccess(id)))\n        .catch(error => dispatch(deleteContactError(error)));\n};\n\nexport const addContact = contact => dispatch => {\n    dispatch(addContactStart());\n\n    fetch\n        .post('', contact)\n        .then(response => dispatch(addContactSuccess(response.data)))\n        .catch(error => dispatch(addContactError(error)));\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { filter } from './Filter.module.css';\n\nconst NumberFilter = ({ value, onChangeFilter }) => (\n    <div className={filter}>\n        <p>Find contacts by name</p>\n        <input\n            type=\"text\"\n            value={value}\n            onChange={onChangeFilter}\n            placeholder=\"Enter name...\"\n        />\n    </div>\n);\n\nNumberFilter.propTypes = {\n    value: PropTypes.string.isRequired,\n    onChangeFilter: PropTypes.func.isRequired,\n};\n\nexport default NumberFilter;\n","import { connect } from 'react-redux';\n\nimport { changeFilter } from '../../redux/contacts/contactsActions';\nimport { getFilter } from '../../redux/contacts/contactsSelectors';\n\nimport Filter from './Filter';\n\nconst mapStateToProps = state => ({\n    value: getFilter(state),\n});\n\nconst mapDispatchToProps = dispatch => ({\n    onChangeFilter: event => dispatch(changeFilter(event.target.value)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { form, button } from './CreateContactForm.module.css';\n\nexport default class TaskEditor extends Component {\n    static propTypes = {\n        onAddContact: PropTypes.func.isRequired,\n    };\n\n    state = {\n        name: '',\n        number: '',\n    };\n\n    handleChange = event => {\n        this.setState({ [event.target.name]: event.target.value });\n    };\n\n    handleSubmit = event => {\n        event.preventDefault();\n\n        this.props.onAddContact({ ...this.state });\n\n        this.setState({\n            name: '',\n            number: '',\n        });\n    };\n\n    render() {\n        const { name, number } = this.state;\n\n        return (\n            <form onSubmit={this.handleSubmit} className={form}>\n                <div>\n                    <label htmlFor=\"name_input\">Name</label>\n                    <input\n                        type=\"text\"\n                        placeholder=\"Enter contact`s name\"\n                        value={name}\n                        onChange={this.handleChange}\n                        name=\"name\"\n                        id=\"name_input\"\n                    />\n                </div>\n                <div>\n                    <label htmlFor=\"number_input\">Number</label>\n                    <input\n                        type=\"number\"\n                        placeholder=\"Enter contact`s name\"\n                        value={number}\n                        onChange={this.handleChange}\n                        name=\"number\"\n                        id=\"number_input\"\n                    />\n                </div>\n                <button className={button} type=\"submit\">\n                    Add contact\n                </button>\n            </form>\n        );\n    }\n}\n","import { connect } from 'react-redux';\nimport * as contactsActions from '../../redux/contacts/contactsActions';\nimport CreateContactForm from './CreateContactForm';\n\nconst mapDispatchToProps = dispatch => ({\n    onAddContact: contact => dispatch(contactsActions.addContactValid(contact)),\n});\n\nexport default connect(null, mapDispatchToProps)(CreateContactForm);\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { p } from './Alert.module.css';\n\nconst Alert = ({ message }) => <p className={p}>{message}!</p>;\n\nAlert.propTypes = {\n    message: PropTypes.string.isRequired,\n};\n\nexport default Alert;\n","import React, { Component } from 'react';\nimport { CSSTransition } from 'react-transition-group';\nimport PropTypes from 'prop-types';\n\nimport styles from './App.module.css';\nimport slideTittleTransition from '../../transitions/slide-500ms.module.css';\nimport popTransition from '../../transitions/pop.module.css';\n\nimport Section from '../Section/Section';\nimport ContactsList from '../ContactsList/ContatctsListContainer';\nimport Filter from '../Filter/FilterContainer';\nimport CreateContactForm from '../CreateContactForm/CreateContactFormContainer';\nimport Alert from '../Alert/Alert';\n\nexport default class App extends Component {\n    static propTypes = {\n        alert: PropTypes.string.isRequired,\n        count: PropTypes.number.isRequired,\n    };\n\n    state = {\n        addTittle: false,\n    };\n\n    componentDidMount() {\n        this.setState({\n            addTittle: true,\n        });\n    }\n\n    render() {\n        const { addTittle } = this.state;\n        const { alert, count } = this.props;\n        const isAlert = !!alert;\n\n        return (\n            <div className={styles.container}>\n                <CSSTransition\n                    in={addTittle}\n                    timeout={500}\n                    classNames={slideTittleTransition}\n                    unmountOnExit\n                >\n                    <h1>Phonebook</h1>\n                </CSSTransition>\n\n                <Section title=\"\">\n                    <CreateContactForm />\n                </Section>\n                <CSSTransition\n                    in={count >= 2}\n                    timeout={500}\n                    classNames={popTransition}\n                    unmountOnExit\n                >\n                    <Section title=\"\">\n                        <Filter />\n                    </Section>\n                </CSSTransition>\n\n                <Section title=\"\">\n                    <ContactsList />\n                </Section>\n\n                <CSSTransition\n                    in={isAlert}\n                    timeout={300}\n                    classNames={popTransition}\n                    unmountOnExit\n                >\n                    <Alert message={alert} />\n                </CSSTransition>\n            </div>\n        );\n    }\n}\n","import { connect } from 'react-redux';\n\nimport { getContactsLength } from '../../redux/contacts/contactsSelectors';\nimport getAlert from '../../redux/alert/alertSelectors';\n\nimport App from './App';\n\nconst mapStateToProps = state => ({\n    alert: getAlert(state),\n    count: getContactsLength(state),\n});\n\nexport default connect(mapStateToProps, null)(App);\n","import { createReducer, combineReducers } from '@reduxjs/toolkit';\nimport {\n    deleteContactSuccess,\n    loadContactsSuccess,\n    changeFilter,\n    addContactSuccess,\n} from './contactsActions';\n\nconst contactsReducer = createReducer([], {\n    [loadContactsSuccess]: (state, action) => action.payload.contacts,\n    [addContactSuccess]: (state, action) => [...state, action.payload.contact],\n    [deleteContactSuccess]: (state, action) =>\n        state.filter(({ id }) => id !== action.payload.id),\n});\n\nconst filterReducer = createReducer('', {\n    [changeFilter]: (state, action) => action.payload.filter,\n    [deleteContactSuccess]: () => '',\n});\n\nconst contactsListReducer = combineReducers({\n    contacts: contactsReducer,\n    filter: filterReducer,\n});\n\nexport default contactsListReducer;\n","import { createAction } from '@reduxjs/toolkit';\n\nexport const toShowAlert = createAction('SHOWALERT', message => ({\n    payload: { message },\n}));\nexport const toHideAlert = createAction('HIDEALERT');\n","import { createReducer } from '@reduxjs/toolkit';\nimport { toHideAlert, toShowAlert } from './alertActions';\n\nconst alertReducer = createReducer('', {\n    [toShowAlert]: (state, action) => action.payload.message,\n    [toHideAlert]: () => '',\n});\n\nexport default alertReducer;\n","import * as Joi from '@hapi/joi';\n\nconst INVALIDVALUE = {\n    name:\n        'The name must contain only the letters a-z, A-C and a space, with length from 3 to 20 characters',\n    number:\n        'The number must contain only integers from 0-9, 10 characters long',\n    notUnique: 'Contact already exist!',\n};\n\nexport const META = {\n    error: 'error',\n    success: 'success',\n};\n\nconst schema = Joi.object({\n    name: Joi.string()\n        .pattern(/^[a-zA-Z ]{3,20}$/)\n        .trim()\n        .required(),\n    number: Joi.string()\n        .pattern(/^[0-9]{10}$/)\n        .required(),\n});\n\nclass Validation {\n    constructor(validSchema) {\n        this.schema = validSchema;\n    }\n\n    validate = (contacts, contact) => {\n        const { error, value } = this.schema.validate(contact);\n        if (error) {\n            return this.errorTransform(error);\n        }\n\n        const isUniqueName = this.checkUnique(contacts, contact);\n        if (isUniqueName) {\n            return { message: INVALIDVALUE.notUnique, meta: META.error };\n        }\n\n        return { contact: value, meta: META.success };\n    };\n\n    errorTransform = error => {\n        if (error.details[0].type === 'string.empty') {\n            return { message: error.message, meta: META.error };\n        }\n        const incorrValue = error.details[0].path[0];\n\n        return { message: INVALIDVALUE[incorrValue], meta: META.error };\n    };\n\n    checkUnique = (contacts, contact) => {\n        return contacts.some(\n            savedContact =>\n                savedContact.name.toLowerCase() === contact.name.toLowerCase(),\n        );\n    };\n}\n\nexport default new Validation(schema);\n","import * as alertActions from '../alert/alertActions';\nimport { addContact } from '../contacts/contactsOperations';\nimport Validation, { META } from '../../helpers/Validation';\nimport { getContacts } from '../contacts/contactsSelectors';\n\nconst validation = store => next => action => {\n    if (action.meta && action.meta.addContact) {\n        const state = store.getState();\n        const contacts = getContacts(state);\n        const { contact } = action.payload;\n        const validateRes = Validation.validate(contacts, contact);\n        if (validateRes.meta === META.success) {\n            store.dispatch(addContact(validateRes.contact));\n        }\n        const alertMessage = validateRes.message ? validateRes.message : '';\n\n        store.dispatch(alertActions.toShowAlert(alertMessage));\n\n        setTimeout(() => {\n            store.dispatch(alertActions.toHideAlert());\n        }, 3000);\n        return;\n    }\n\n    next(action);\n};\n\nexport default validation;\n","import * as alertActions from '../alert/alertActions';\n\nconst errorHandler = store => next => action => {\n    if (action.meta && action.meta.error) {\n        store.dispatch(alertActions.toShowAlert(action.payload.message));\n\n        setTimeout(() => {\n            store.dispatch(alertActions.toHideAlert());\n        }, 3000);\n        return;\n    }\n\n    next(action);\n};\n\nexport default errorHandler;\n","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\n\nimport contactsListReducer from './contacts/contactsReducer';\nimport alertReducer from './alert/alertReducer';\n\nimport validation from './middleware/validation';\nimport errorHandler from './middleware/errorHandler';\n\nconst store = configureStore({\n    reducer: {\n        contactsList: contactsListReducer,\n        alert: alertReducer,\n    },\n    middleware: [...getDefaultMiddleware(), errorHandler, validation],\n});\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport 'material-design-icons/iconfont/material-icons.css';\n\nimport { Provider } from 'react-redux';\nimport App from './components/App/AppContainer';\nimport store from './redux/store';\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.querySelector('#root'),\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"ContactsList_list__2RiYd\",\"item\":\"ContactsList_item__2O7n3\",\"wrap\":\"ContactsList_wrap__2wfAx\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"enter\":\"pop_enter__1NM7x\",\"enterActive\":\"pop_enterActive__1Bhql\",\"exit\":\"pop_exit__1_phz\",\"exitActive\":\"pop_exitActive__3xbz2\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"CreateContactForm_form__1IKsq\",\"button\":\"CreateContactForm_button__v34X3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__16xz_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"enter\":\"slide-500ms_enter__3KjJC\",\"enterActive\":\"slide-500ms_enterActive__1PUSQ\",\"exit\":\"slide-500ms_exit__Yd33a\",\"exitActive\":\"slide-500ms_exitActive__3BQFL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"titleSection\":\"Section_titleSection__3sOBD\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"enter\":\"slide_enter__BLs75\",\"enterActive\":\"slide_enterActive__2XArv\",\"exit\":\"slide_exit__2XvOt\",\"exitActive\":\"slide_exitActive__3LNYO\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"filter\":\"Filter_filter__1E5tH\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"p\":\"Alert_p__3pTNQ\"};"],"sourceRoot":""}